#!/bin/bash
source $(dirname $0)/test-common.sh
set -e
set -o pipefail

printf "testing the creation of VM with a volume in default datastore "

progress

IMGID=$(oneimage create -d default --name data --type DATABLOCK --size 200 --fstype ext3 --persistent | awk '{ print $2 }')
while [ "$(oneimage show $IMGID -x | /var/lib/one/remotes/datastore/xpath.rb /IMAGE/STATE)" == "4" ]; do
    spin
    sleep 2
done

progress

cat > /tmp/onedock.vm << EOT
NAME = container-img-$IMGID
CPU = 1
MEMORY = 1024
DISK = [ IMAGE=ubuntu ]
DISK = [ IMAGE_ID=$IMGID ]
NIC = [ NETWORK_ID=0 ]
CONTEXT = [ NETWORK = "YES" ]
EOT

progress

# Create a vm
VMID=$(onevm create /tmp/onedock.vm | awk '{print $2}')

progress

# Froce deploying just in case that it has not enough cores
onevm deploy $VMID $HOSTNAME

progress

# Check pending state
while [ "$(onevm show -x $VMID | /var/lib/one/remotes/datastore/xpath.rb /VM/STATE)" == "1" ];
do
    spin
    sleep 2
done
# Wait a little more, until running state
wait_for_timeout_nequal 30 1 "onevm show -x $VMID | /var/lib/one/remotes/datastore/xpath.rb /VM/STATE" "3"

progress

# Check running state
[ "$(onevm show -x $VMID | /var/lib/one/remotes/datastore/xpath.rb /VM/STATE)" != "3" ] && exit 1

progress

wait_for 10

# Do a ping to check the machine
IP=$(onevm show -x $VMID | /var/lib/one/remotes/datastore/xpath.rb /VM/TEMPLATE/NIC/IP)
ping -c 3 $IP > /dev/null

progress

# Check the docker containers
[ "$(docker ps | grep one-$VMID)" == "" ] && exit 1
# Check the state of the container 
[ "$(docker inspect -f '{{.State.Running}}' one-$VMID)" == "" ] && exit 1
# Check the images repository
[ "$(docker images | grep "one-$VMID")" == "" ] && exit 1

progress

DEVICE=$(docker inspect -f '{{range .HostConfig.Devices}}{{.PathOnHost}}{{end}}' one-$VMID)
SIZE=$(cat /sys/class/block/$(basename $DEVICE)/size)
[ $SIZE -eq 0 ] && exit 1

progress

onevm shutdown $VMID > /dev/null

wait_for 10

[ "$(oneimage show $IMGID -x | /var/lib/one/remotes/datastore/xpath.rb /IMAGE/STATE)" != "1" ] && exit 1

oneimage delete $IMGID > /dev/null

progress

wait_for 10

SIZE=$(cat /sys/class/block/$(basename $DEVICE)/size)
[ $SIZE -ne 0 ] && exit 1

echo "suceeded"
exit 0

